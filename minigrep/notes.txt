For our project, we’ll make our own version of the classic command line tool grep (globally search
a regular expression and print). In the simplest use case, grep searches a specified file for a
specified string. To do so, grep takes as its arguments a filename and a string. Then it reads the
file, finds lines in that file that contain the string argument, and prints those lines.

The organizational problem of allocating responsibility for multiple tasks to the main function is common
to many binary projects. As a result, the Rust community has developed a process to use as a guideline for
splitting the separate concerns of a binary program when main starts getting large. The process has the
following steps:

1. Split your program into a main.rs and a lib.rs and move your program’s logic to lib.rs.
2. As long as your command line parsing logic is small, it can remain in main.rs.
3. When the command line parsing logic starts getting complicated, extract it from main.rs and move it to lib.rs.

The responsibilities that remain in the main function after this process should be limited to the following:

1. Calling the command line parsing logic with the argument values
2. Setting up any other configuration
3. Calling a run function in lib.rs
4. Handling the error if run returns an error

The Trade-Offs of Using clone:
There’s a tendency among many Rustaceans to avoid using clone to fix ownership problems because of
its runtime cost. In Chapter 13, you’ll learn how to use more efficient methods in this type of
situation. But for now, it’s okay to copy a few strings to continue making progress because you’ll
make these copies only once and your filename and query string are very small. It’s better to have
a working program that’s a bit inefficient than to try to hyperoptimize code on your first pass.
As you become more experienced with Rust, it’ll be easier to start with the most efficient solution,
but for now, it’s perfectly acceptable to call clone.

Like in previous chapters, ? will return the error value from the current function for the caller to handle.

This Ok(()) syntax might look a bit strange at first, but using () like this is the idiomatic way to indicate
that we’re calling run for its side effects only; it doesn’t return a value we need.

For the lifetimes on search function: we tell Rust that the data returned by the search function
will live as long as the data passed into the search function in the contents argument. This is
important! The data referenced by a slice needs to be valid for the reference to be valid; if the
compiler assumes we’re making string slices of query rather than contents, it will do its safety
checking incorrectly. Rust can’t possibly know which of the two arguments we need, so we need to
tell it. Because contents is the argument that contains all of our text and we want to return the
parts of that text that match, we know contents is the argument that should be connected to the
return value using the lifetime syntax.

Iterating Through Lines with the lines Method: Rust has a helpful method to handle line-by-line
iteration of strings, conveniently named lines.

We’re using the is_err method on the Result the code for Config methods to check whether it’s an
error and therefore unset which means it should do a case-sensitive search. If the CASE_INSENSITIVE
environment variable is set to anything, is_err will return false and the program will perform a
case-insensitive search. We don’t care about the value of the environment variable, just whether
it’s set or unset, so we’re checking is_err rather than using unwrap, expect, or any of the other
methods we’ve seen on Result.